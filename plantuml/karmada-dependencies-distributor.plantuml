@startuml

skin rose

title "Karmada Dependencies Distributor"


database "ApiServer" as ApiServer
entity "Dependencies Distributor" as dd


ApiServer -> dd : Watch

note right
ResourceBinding
AllResources
end note


ApiServer -> dd: RB Event（update, delete） fileter: bindingObject.Spec.PropagateDeps==true

group DeleteEvent
    dd -> dd: if RB is not exists or RB.deletetimestrip != 0
    dd -> dd: list AttachedBinding by this Rb
    dd -> ApiServer: delete label depended-by from used attatchBindings
    dd -> ApiServer: delete requiredBy from used attatchBindings.Spec
    note right
        rb has resource's ownerReferences, resource delete, rb will be gc
    end note
end

group UpdateEvent
    dd -> dd: if users set PropagateDeps field from "true" to "false" \n handleResourceBindingDeletion
    dd -> ApiServer: get workload from rb
    dd -> dd: get workload dependencies from ResourceInterpreter
    dd -> dd: record DependenciesForIndependentBinding to annotations

    group remove orphan attached bindings
        dd -> ApiServer: findOrphanAttachedResourceBindings
        dd -> ApiServer: delete label depended-by from Orphan attatchBindings
        dd -> ApiServer: delete requiredBy from Orphan attatchBindings.Spec
    end

    loop every dependencies
        dd -> ApiServer: get rawObject from dependencies
        dd -> dd: if Object not exists, do nothing
        dd -> dd: buildAttachedBinding
        dd -> ApiServer: createOrUpdate AttachedBinding
    end
end


ApiServer -> dd: Object Event(create, update, delete)
dd -> dd: list all rb in Object ns
dd -> dd: if rb.annotation.dependencies = object, enqueue rb
dd -> bindingReconcileWorker: Enqueue binding Event


@enduml

